# Importing necessary libraries
import logging
import sqlite3
from decouple import config
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime


# Fetching necessary configurations from environment variables
TOKEN = config('TELEGRAM_TOKEN')
ASTAH_CHAT_ID = config('ASTAH_CHAT_ID')

# Setting up logging configurations
logging.basicConfig(level=logging.INFO)

# Initializing aiogram Bot and Dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Setting up AsyncIO scheduler for scheduled tasks
scheduler = AsyncIOScheduler()

# Initialize the SQLite database
conn = sqlite3.connect('astah_bot.db')
cursor = conn.cursor()

# Create user_goals table if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS user_goals (
    user_id INTEGER PRIMARY KEY,
    points INTEGER DEFAULT 0
)''')

# Check if the column current_pullups exists
cursor.execute("PRAGMA table_info(user_goals)")
columns = [column[1] for column in cursor.fetchall()]
if "current_pullups" not in columns:
    cursor.execute('''ALTER TABLE user_goals ADD COLUMN current_pullups INTEGER DEFAULT 5''')


conn.commit()

# Functions to interact with the database

def get_current_pullups(user_id):
    cursor.execute("SELECT current_pullups FROM user_goals WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 5

def increase_pullups_goal(user_id, increment=1): # –î–æ–ø—É—Å—Ç–∏–º, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
    current_pullups = get_current_pullups(user_id)
    new_goal = current_pullups + increment
    cursor.execute("UPDATE user_goals SET current_pullups = ? WHERE user_id = ?", (new_goal, user_id))
    conn.commit()

def add_points(user_id, points):
    cursor.execute("INSERT OR IGNORE INTO user_goals (user_id, points) VALUES (?, ?)", (user_id, points))
    cursor.execute("UPDATE user_goals SET points = points + ? WHERE user_id = ?", (points, user_id))
    conn.commit()

def get_points(user_id):
    cursor.execute("SELECT points FROM user_goals WHERE user_id = ?", (user_id,))
    points = cursor.fetchone()
    return points[0] if points else 0

# Async functions for bot notifications
async def wake_up():
    await bot.send_message(ASTAH_CHAT_ID, "–ê—Å—Ç–∞—Ö, –ø–æ—Ä–∞ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è! ‚òÄÔ∏è")

async def training_reminder():
    await bot.send_message(ASTAH_CHAT_ID, "–ê—Å—Ç–∞—Ö, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ —Ñ—É—Ç–±–æ–ª—É —Å–µ–≥–æ–¥–Ω—è –≤ 16:20! ‚öΩÔ∏è")

async def morning_stretch():
    await bot.send_message(ASTAH_CHAT_ID, "–ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞–∑–º–∏–Ω–∫—É, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üí™")

# Setting up scheduler jobs
def setup_scheduler_jobs():
    scheduler.add_job(wake_up, CronTrigger(hour=9, minute=0))
    scheduler.add_job(training_reminder, CronTrigger(day_of_week='tue,thu,sat', hour=16, minute=20))
    scheduler.add_job(morning_stretch, CronTrigger(hour=9, minute=20))

# Setting up keyboards for bot interactions
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_btn = KeyboardButton("–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")
goals_btn = KeyboardButton("–ú–æ–∏ —Ü–µ–ª–∏")
menu_kb.row(menu_btn, goals_btn)

# Bot message handlers

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –ê—Å—Ç–∞—Ö! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.", reply_markup=menu_kb)

@dp.message_handler(lambda message: message.text == '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç')
async def personal_account(message: types.Message):
    user_id = message.from_user.id
    points = get_points(user_id)

    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_datetime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –ò–∑–º–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"–£ —Ç–µ–±—è {points} –±–∞–ª–ª–æ–≤!\n–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_datetime}", reply_markup=menu_kb)


@dp.message_handler(lambda message: message.text == '–ú–æ–∏ —Ü–µ–ª–∏')
async def show_goals(message: types.Message):
    goals_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    pushups_btn = KeyboardButton("–û—Ç–∂–∏–º–∞–Ω–∏—è 10")
    pullups_btn = KeyboardButton("–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 5")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    back_btn = KeyboardButton("–ù–∞–∑–∞–¥")
    goals_kb.row(pushups_btn, pullups_btn, back_btn)  # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥
    await message.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=goals_kb)


@dp.message_handler(lambda message: message.text.startswith('–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è'))
async def pullups_goal(message: types.Message):
    user_id = message.from_user.id
    current_pullups = get_current_pullups(user_id)

    pullups_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    done_btn = KeyboardButton("–ì–û–¢–û–í–û")
    next_time_btn = KeyboardButton("–í –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–ó")
    back_btn = KeyboardButton("–ù–∞–∑–∞–¥")
    pullups_kb.row(done_btn, next_time_btn)
    pullups_kb.row(back_btn)

    await message.answer(
        f'{current_pullups} –ß–∏—Å—Ç—ã—Ö –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π - {current_pullups} –±–∞–ª–ª–æ–≤ (–ü–∞–ø–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!)',
        reply_markup=pullups_kb)

@dp.message_handler(lambda message: message.text == '–ì–û–¢–û–í–û' and '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è' in message.reply_to_message.text)
async def pullups_done(message: types.Message):
    user_id = message.from_user.id
    current_pullups = get_current_pullups(user_id)

    add_points(user_id, current_pullups)
    increase_pullups_goal(user_id)

    await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {current_pullups} –±–∞–ª–ª–æ–≤! üåü', reply_markup=menu_kb)


@dp.message_handler(lambda message: message.text == '–ì–û–¢–û–í–û')
async def done(message: types.Message):
    user_id = message.from_user.id
    current_pushups = get_current_pushups(user_id)

    add_points(user_id, current_pushups)
    increase_pushups_goal(user_id)

    await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {current_pushups} –±–∞–ª–ª–æ–≤! üåü', reply_markup=menu_kb)

@dp.message_handler(lambda message: message.text == '–í –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–ó')
async def next_time(message: types.Message):
    await message.answer('–ù–∏—á–µ–≥–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è! üëç', reply_markup=menu_kb)

@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥')
async def back(message: types.Message):
    await message.answer('–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=menu_kb)

# Main execution: setting up scheduled jobs and starting bot polling
if __name__ == '__main__':
    setup_scheduler_jobs()
    scheduler.start()
    try:
        executor.start_polling(dp)
    finally:
        conn.close()  # Close SQLite connection when bot stops
